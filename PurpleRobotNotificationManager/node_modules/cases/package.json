{
  "name": "cases",
  "version": "0.0.2",
  "description": "cases provides parameterized unit tests for Mocha.",
  "author": {
    "name": "Golo Roden",
    "email": "webmaster@goloroden.de",
    "url": "http://www.goloroden.de"
  },
  "main": "./lib/cases",
  "dependencies": {
    "async": "0.2.6"
  },
  "devDependencies": {
    "grunt": "0.4.0",
    "grunt-contrib-jshint": "0.1.1",
    "grunt-contrib-watch": "0.2.0",
    "grunt-mocha-test": "0.2.0",
    "node-assertthat": "0.0.18"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/goloroden/cases.git"
  },
  "readme": "# cases\n\ncases provides parameterized unit tests for Mocha.\n\nIf you have any questions or feedback, feel free to contact me using [@goloroden](https://twitter.com/goloroden) on Twitter.\n\n## Installation\n\n    $ npm install cases\n\n## Quick Start\n\nUsing cases is easy. All you need to do is to add a reference to it within your Node.js application:\n\n```javascript\nvar cases = require('cases');\n```\n\nNow you can write your tests using Mocha as usual, but you may introduce cases for tests where you need multiple test cases.\n\n```javascript\ntest('add returns the sum.', cases([\n  [ 23, 42, 65 ],\n  [ 12, 17, 29 ]\n], function (first, second, expected) {\n  var actual = add(first, second);\n  assert.that(actual, is.equalTo(expected));\n}));\n```\n\nThis also works with asynchronous tests. The only difference is that you additionally need to provide the `done` parameter to your test function.\n\n```javascript\ntest('addAsync returns the sum.', cases([\n  [ 23, 42, 65 ],\n  [ 12, 17, 29 ]\n], function (first, second, expected, done) {\n  addAsync(first, second, function (actual) {\n    assert.that(actual, is.equalTo(expected));\n    done();\n  });\n}));\n```\n\n### Non-inline test cases\n\nInstead of providing all the test cases as inline data, you can alternatively specify a function that returns the test cases. This way you can load your test data from a file, a database or any other data source.\n\n```javascript\ntest('add returns the sum.', cases(function () {\n  return [\n    [ 23, 42, 65 ],\n    [ 12, 17, 29 ]\n  ];\n}, function (first, second, expected) {\n  var actual = add(first, second);\n  assert.that(actual, is.equalTo(expected));\n}));\n```\n\nThis also works for asynchronous test functions. Please note that the function that gets the test cases must be synchronous nevertheless.\n\n```javascript\ntest('add returns the sum.', cases(function () {\n  return [\n    [ 23, 42, 65 ],\n    [ 12, 17, 29 ]\n  ];\n}, function (first, second, expected, done) {\n  addAsync(first, second, function (actual) {\n    assert.that(actual, is.equalTo(expected));\n    done();\n  });\n}));\n```\n\n## Running the tests\n\ncases has been developed using TDD. To run the tests, go to the folder where you have installed cases to and run `npm test`. You need to have [mocha](https://github.com/visionmedia/mocha) installed.\n\n    $ npm test\n\nAdditionally, this module can be built using [Grunt](http://gruntjs.com/). Besides running the tests, Grunt also analyses the code using [JSHint](http://www.jshint.com/). To run Grunt, go to the folder where you have installed cases and run `grunt`. You need to have [grunt-cli](https://github.com/gruntjs/grunt-cli) installed.\n\n    $ grunt\n\n## License\n\nThe MIT License (MIT)\nCopyright (c) 2013 Golo Roden.\n \nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n \nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "cases@0.0.2",
  "dist": {
    "shasum": "9ed95ea26b9b60b4642dd7b90d9f7e6bd59c93cb"
  },
  "_from": "cases@",
  "_resolved": "https://registry.npmjs.org/cases/-/cases-0.0.2.tgz"
}
